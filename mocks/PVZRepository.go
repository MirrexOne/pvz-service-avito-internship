// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "pvz-service-avito-internship/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// PVZRepository is an autogenerated mock type for the PVZRepository type
type PVZRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, pvz
func (_m *PVZRepository) Create(ctx context.Context, pvz *domain.PVZ) error {
	ret := _m.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PVZ) error); ok {
		r0 = rf(ctx, pvz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PVZRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.PVZ, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.PVZ, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.PVZ); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ctx, ids
func (_m *PVZRepository) GetByIDs(ctx context.Context, ids []uuid.UUID) ([]domain.PVZ, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []domain.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.PVZ, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.PVZ); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx
func (_m *PVZRepository) ListAll(ctx context.Context) ([]domain.PVZ, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []domain.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.PVZ, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.PVZ); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIDsAndTotal provides a mock function with given fields: ctx, limit, offset, startDate, endDate
func (_m *PVZRepository) ListIDsAndTotal(ctx context.Context, limit int, offset int, startDate *time.Time, endDate *time.Time) ([]uuid.UUID, int, error) {
	ret := _m.Called(ctx, limit, offset, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for ListIDsAndTotal")
	}

	var r0 []uuid.UUID
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time, *time.Time) ([]uuid.UUID, int, error)); ok {
		return rf(ctx, limit, offset, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time, *time.Time) []uuid.UUID); ok {
		r0 = rf(ctx, limit, offset, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *time.Time, *time.Time) int); ok {
		r1 = rf(ctx, limit, offset, startDate, endDate)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *time.Time, *time.Time) error); ok {
		r2 = rf(ctx, limit, offset, startDate, endDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewPVZRepository creates a new instance of PVZRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZRepository {
	mock := &PVZRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
