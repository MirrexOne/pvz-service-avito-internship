// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "pvz-service-avito-internship/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PVZService is an autogenerated mock type for the PVZService type
type PVZService struct {
	mock.Mock
}

// CreatePVZ provides a mock function with given fields: ctx, city
func (_m *PVZService) CreatePVZ(ctx context.Context, city domain.City) (*domain.PVZ, error) {
	ret := _m.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 *domain.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.City) (*domain.PVZ, error)); ok {
		return rf(ctx, city)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.City) *domain.PVZ); ok {
		r0 = rf(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.City) error); ok {
		r1 = rf(ctx, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPVZs provides a mock function with given fields: ctx, limit, page, startDate, endDate
func (_m *PVZService) ListPVZs(ctx context.Context, limit int, page int, startDate *time.Time, endDate *time.Time) ([]domain.PVZWithDetails, int, error) {
	ret := _m.Called(ctx, limit, page, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for ListPVZs")
	}

	var r0 []domain.PVZWithDetails
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time, *time.Time) ([]domain.PVZWithDetails, int, error)); ok {
		return rf(ctx, limit, page, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time, *time.Time) []domain.PVZWithDetails); ok {
		r0 = rf(ctx, limit, page, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *time.Time, *time.Time) int); ok {
		r1 = rf(ctx, limit, page, startDate, endDate)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *time.Time, *time.Time) error); ok {
		r2 = rf(ctx, limit, page, startDate, endDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewPVZService creates a new instance of PVZService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZService {
	mock := &PVZService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
