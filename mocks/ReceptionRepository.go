// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "pvz-service-avito-internship/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ReceptionRepository is an autogenerated mock type for the ReceptionRepository type
type ReceptionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, reception
func (_m *ReceptionRepository) Create(ctx context.Context, reception *domain.Reception) error {
	ret := _m.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Reception) error); ok {
		r0 = rf(ctx, reception)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOpenByPVZID provides a mock function with given fields: ctx, pvzID
func (_m *ReceptionRepository) FindOpenByPVZID(ctx context.Context, pvzID uuid.UUID) (*domain.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for FindOpenByPVZID")
	}

	var r0 *domain.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ReceptionRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.Reception, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Reception, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Reception); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByPVZIDsAndDate provides a mock function with given fields: ctx, pvzIDs, startDate, endDate
func (_m *ReceptionRepository) ListByPVZIDsAndDate(ctx context.Context, pvzIDs []uuid.UUID, startDate *time.Time, endDate *time.Time) (map[uuid.UUID][]domain.ReceptionWithProducts, error) {
	ret := _m.Called(ctx, pvzIDs, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for ListByPVZIDsAndDate")
	}

	var r0 map[uuid.UUID][]domain.ReceptionWithProducts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, *time.Time, *time.Time) (map[uuid.UUID][]domain.ReceptionWithProducts, error)); ok {
		return rf(ctx, pvzIDs, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, *time.Time, *time.Time) map[uuid.UUID][]domain.ReceptionWithProducts); ok {
		r0 = rf(ctx, pvzIDs, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID][]domain.ReceptionWithProducts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, pvzIDs, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *ReceptionRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status domain.ReceptionStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.ReceptionStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReceptionRepository creates a new instance of ReceptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionRepository {
	mock := &ReceptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
